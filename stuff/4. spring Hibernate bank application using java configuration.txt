Hibernate/JPA discussion:
------------------------

step 1: create db and table

create table Account (id integer not null auto_increment, balance double precision not null, name varchar(255), primary key (id));
insert into Account (balance, name) values (100, "A");
insert into Account (balance, name) values (100, "B");

step 2: Dao layer
---------------------


@Entity
public class Account {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	private String name;
	private double balance;



public interface AccountDao {
	public void update(Account account);
	public Account find(int id);
	//
}



@Repository
public class AccountDaoImp implements AccountDao {

	@Autowired
	private SessionFactory sessionFactory;

	protected Session getSession() {
		return sessionFactory.getCurrentSession();
	}
	
	@Override
	public void update(Account account) {
		getSession().update(account);
	}

	@Override
	public Account find(int id) {
		return (Account) getSession().get(Account.class, id);
	}

}


Service layer:
----------------
public interface AccountService {
	public void transfer(int from, int to, int amout);
	public void deposit(int id, double amount);
	public Account getAccount(int id);
}



@Service(value="accountService")
@Transactional(propagation=Propagation.SUPPORTS, readOnly=true)
public class AccountServiceImp implements AccountService {
	
		@Autowired
		private AccountDao accountDao;
		
		public void setAccountDao(AccountDao accountDao) {
			this.accountDao = accountDao;
		}
	
		@Transactional( isolation=Isolation.REPEATABLE_READ,
				propagation=Propagation.REQUIRED, readOnly=false)
		@Override
		public void transfer(int from, int to, int amout) {
			Account fromAccount=accountDao.find(from);
			Account toAccount=accountDao.find(to);
			
			fromAccount.setBalance(fromAccount.getBalance()-amout);
			toAccount.setBalance(toAccount.getBalance()+amout);
			
			accountDao.update(fromAccount);
			accountDao.update(toAccount);
			System.out.println("------------");
		}
	
		@Override
		public void deposit(int id, double amount) {
			Account account=accountDao.find(id);
			account.setBalance(account.getBalance()+amount);
			accountDao.update(account);
		}
	
		@Override
		public Account getAccount(int id) {
			// TODO Auto-generated method stub
			return accountDao.find(id);
		}
	
	}




tester :
----------

@Configuration
@ComponentScan(basePackages = "com.yms")
public class AppConfig {
 
}



 
@Configuration
@EnableTransactionManagement
@ComponentScan({ "com.yms" })
@PropertySource(value = { "classpath:application.properties" })
public class HibernateConfiguration {
 
    @Autowired
    private Environment environment;
 
    @Bean
    @Autowired
    public LocalSessionFactoryBean sessionFactory(DataSource ds) {
        LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
        sessionFactory.setDataSource(ds);
        sessionFactory.setPackagesToScan(new String[] { "com.yms.bankapp.pesistance" });
        sessionFactory.setHibernateProperties(hibernateProperties());
        return sessionFactory;
     }
     
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(environment.getRequiredProperty("jdbc.driverClassName"));
        dataSource.setUrl(environment.getRequiredProperty("jdbc.url"));
        dataSource.setUsername(environment.getRequiredProperty("jdbc.username"));
        dataSource.setPassword(environment.getRequiredProperty("jdbc.password"));
        return dataSource;
    }
     
    private Properties hibernateProperties() {
        Properties properties = new Properties();
        properties.put("hibernate.dialect", environment.getRequiredProperty("hibernate.dialect"));
        properties.put("hibernate.show_sql", environment.getRequiredProperty("hibernate.show_sql"));
        properties.put("hibernate.format_sql", environment.getRequiredProperty("hibernate.format_sql"));
        return properties;        
    }
     
    @Bean
    @Autowired
    public HibernateTransactionManager transactionManager(SessionFactory s) {
       HibernateTransactionManager txManager = new HibernateTransactionManager();
       txManager.setSessionFactory(s);
       return txManager;
    }
    
  /*  @Bean
  
    public HibernateTransactionManager transactionManager121() {
       HibernateTransactionManager txManager = new HibernateTransactionManager();
       txManager.setSessionFactory((SessionFactory) sessionFactory());
       return txManager;
    }*/
}




public class Tester {

	public static void main(String[] args) {
		 AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
		 
	      AccountService as=context.getBean("accountService", AccountService.class);
	      as.transfer(1, 2, 10);
	}
}




property file:
--------------
jdbc.driverClassName = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://localhost:3306/yms
jdbc.username = root
jdbc.password = root
hibernate.dialect = org.hibernate.dialect.MySQLDialect
hibernate.show_sql = false
hibernate.format_sql = false


	



	
Now apply @Loggable cross cutting concern:
-----------------------------------------

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Loggable {

}





import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
@Component
@Aspect
public class MethodLogger {
	private static final Logger logger=LoggerFactory.getLogger(MethodLogger.class); 
	
  @Around("@annotation(Loggable)")
  public Object around(ProceedingJoinPoint point) throws Throwable {
    long start = System.currentTimeMillis();
    Object result = point.proceed();
    logger.info("start "+MethodSignature.class.cast(point.getSignature()).getMethod().getName()+" is called"+" takes " +(System.currentTimeMillis() - start));
    return result;
  }
}













