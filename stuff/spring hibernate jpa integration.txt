Spring JPA integration:
------------------------
mysql -u root -p

condider:POJO:
------
@Entity 
public class Book {
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int id;
	private String isbn;
	private String title;
	private String author;
	private double price;
	private String review;
	private String publisher;
	private int publishYear;


persistance.xml
---------------

<persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
	<persistence-unit name="jpa" transaction-type="RESOURCE_LOCAL">
		<class>com.demo.Book</class>
		<properties>
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/foo"/>
			<property name="javax.persistence.jdbc.user" value="root"/>
			<property name="javax.persistence.jdbc.password" value="root"/>
			<property name="hibernate.hbm2ddl.auto" value="create"/>
			<property name = "hibernate.show_sql" value = "true" />
		</properties>
	</persistence-unit>
</persistence>



Main:
--------
EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpa");

		EntityManager em = emf.createEntityManager();

		Book book = new Book("A123", "java head first", "katty", 335.5, "good",
				"Oreally", 2005);

		EntityTransaction tx = em.getTransaction();

		try {
			tx.begin();

			em.persist(book);

			tx.commit();
			System.out.println("book is saved...");
		} catch (Exception ex) {
			if (tx != null)
				tx.rollback();
		}

		em.close();
		emf.close();



Problem:
---------

	Each DAO method must:
	------------------------------
	
	1. Obtain a EntityManager instance
	2. Start a transaction
	3. Perform the persistence operation
	4. commit the transaction.
	5. Each DAO method should include its own duplicated 
		exception-handling implementation. 



	These are exactly the problems that motivate
	 us to use Spring with Hibernate


	-------------------------
	 "template design patten"
	-------------------------


	Template Pattern: 
	----------------
		To clean the code and provide more manageable code, 
		Spring utilizes a pattern called Template Pattern. 

		By this pattern, a template object wraps all of the boilerplate
		 repetitive code. 

		Then, this object delegates the persistence calls
		 as a part of functionality in the template. 

		In the Hibernate case, HibernateTemplate extracts all 
		of the boilerplate code, such as obtaining a Session, 
		performing transaction, and handing exceptions.

	

	Data tier implementation with Spring
	---------------------------------------

		we don't  need to implement code for 
		obtaining Session objects, starting and committing transactions,
		 and handling Hibernate exceptions. 

		(We use a HibernateTemplate instance to delegate
		 persistence calls to Hibernate, without direct interaction 
		with Hibernate)



	What we gains with Spring
	===========================================

	1. HibernateTemplate/JpaTemplate object removes the boilerplate code 

	2. Invocation of one of HibernateTemplate's methods throws
	 the generic DataAccessException exception instead of 	HibernateException

	3. Spring lets us demarcate transactions declaratively, 
	 instead of implementing duplicated transaction-management code.


	---------------------------------------
	NOTE:Spring-Hibernate best practices
	------------------------------------------

	Don't use HibernateDaoSupport/HibernateTemplate/JpaTemplate
	-------------------------------------------------------

		Why?
		------
		==>it unnecessarily ties your code to Spring classes.

		===>Since Hibernate 3.0.1 you don't need it any more -
		 you can write a code against a plain Hibernate API while using 
		Spring-managed transactions. 

		==>All you need is to configure Spring transaction support,
		 inject SessionFactory and call getCurrentSession() on it
		 when you need to work with session.

		==>Another benefit of HibernateTemplate is exception translation. 
		Without HibernateTemplate the same functionality can be 
		achieved by using @Repository annotation

	-----------------------------------------------------------------------



	CURD application using Spring Hibernate JPA integration
	-------------------------------------------------------

	Main<======> Service layer<========> Persistance layer<=======> DB


	com.model.persistance
	--------------------

	@Entity 
	public class Book {
		@Id
		@GeneratedValue(strategy=GenerationType.AUTO)
		private int id;
		private String isbn;
		private String title;
		private String author;
		private double price;
		private String review;
		private String publisher;
		private int publishYear;


	public interface BookDao {
		public List<Book> getAllBooks();
		public Book getBookById(int bookId);
		public Book addBook(Book book);
		public Book updateBook(Book book);
		public Book removeBook(int bookId);
	}


	
	@Repository
	public class BookDaoImp implements BookDao {
	
		@PersistenceContext
		private EntityManager em;
	
		@Override
		public List<Book> getAllBooks() {
			return em.createQuery("from book").getResultList();
		}
	
		@Override
		public Book getBookById(int bookId) {
			return em.find(Book.class, bookId);
		}
	
		@Override
		public Book addBook(Book book) {
			em.persist(book);
			em.flush();
			return book;
		}
	
		@Override
		public Book updateBook(Book book) {
			return em.merge(book);
		}
	
		@Override
		public Book removeBook(int bookId) {
			Book book = em.find(Book.class, bookId);
			if (book != null)
				em.remove(bookId);
			return book;
		}
	}



	com.model.service
	--------------------
	public interface BookService {
		public List<Book> getAllBooks();
		public Book getBookById(int bookId);
		public Book addBook(Book book);
		public Book updateBook(Book book);
		public Book removeBook(int bookId);
	}


	
	@Service(value="bs")
	@Transactional
	public class BookServiceImp implements BookService {
	
		@Autowired
		private BookDao dao;
	
		@Override
		public List<Book> getAllBooks() {
			return dao.getAllBooks();
		}
	
		@Override
		public Book getBookById(int bookId) {
			return dao.getBookById(bookId);
		}
	
		@Override
		public Book addBook(Book book) {
			return dao.addBook(book);
		}
	
		@Override
		public Book updateBook(Book book) {
			return dao.updateBook(book);
		}
	
		@Override
		public Book removeBook(int bookId) {
			return dao.removeBook(bookId);
		}
	
	}

	main
	-----
	ApplicationContext ctx=new ClassPathXmlApplicationContext("beans.xml");
		
		BookService service=(BookService) ctx.getBean("bs");
		
		Book book = new Book("B123", "java head servlet", "katty", 335.5, "good",
				"Oreally", 2005);

		Book book2=service.addBook(book);
	



	persistance.xml
	---------------
<persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
	<persistence-unit name="curd" transaction-type="RESOURCE_LOCAL">
	<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<class>com.model.persistance.Book</class>
		<properties>
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/foo"/>
			<property name="javax.persistence.jdbc.user" value="root"/>
			<property name="javax.persistence.jdbc.password" value="root"/>
			<property name="hibernate.hbm2ddl.auto" value="create"/>
			<property name = "hibernate.show_sql" value = "true" />
		</properties>
	</persistence-unit>
</persistence>



beans.xml
-----------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


	<context:annotation-config/>
	<context:component-scan base-package="com"/>
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/foo" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<bean
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" id="entityManagerFactory">
		<property name="persistenceUnitName" value="curd" />
		<property name="dataSource" ref="dataSource" />

	</bean>

	<tx:annotation-driven />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
</beans>



